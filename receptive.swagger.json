{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Pendo Feedback API",
    "description": "## Who is this for?\n\nThis documentation is for developers creating their own integration with [Feedback's](https://www.pendo.io/product/feedback/) API. If you are doing a standard integration, there's a really easy [Javascript integration](https://help.receptive.io/hc/en-us/articles/209221969-How-to-integrate-Receptive-with-your-app) that you should know about before you go to the effort of building your own integration.\n\n## Authentication\n\nAPI calls generally need to be authenticated. Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header named 'auth-token' (preferred), or as a query parameter named 'auth-token'.\n\n## Endpoint\n\nAPI endpoint is https://api.feedback.eu.pendo.io / https://api.feedback.us.pendo.io depending where your datacenter is located.\n\n## Notes\n\nAPI endpoints are being added to this documentation as needed by customers. If you don't see an endpoint you need please contact support and if it exists we'll publish the docs here. The 'try it out' feature on this documentation page will probably be blocked by your browser because the Access-Control-Allow-Origin header has its value set by the Feedback server depending on your hostname.\n\n## Generating client code\n\nThis documentation is automatically generated from an OpenAPI spec available [here](http://apidoc.receptive.io/receptive.swagger.json). You can use Swagger to auto-generate API client code in many languages using the [Swagger Editor](http://editor.swagger.io/#/)",
    "contact": {
      "name": "Feedback Support",
      "email": "support@receptive.io"
    }
  },
  "host": "api.feedback.eu.pendo.io",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "userApiKey (request header)": {
      "description": "Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request as a request header.",
      "type": "apiKey",
      "name": "auth-token",
      "in": "header"
    },
    "userApiKey (query parameter)": {
      "description": "Generate an API Key at https://feedback.pendo.io/app/#/vendor/settings?section=integrate. This key should then be added to every request URL as a query parameter.",
      "type": "apiKey",
      "name": "auth-token",
      "in": "query"
    }
  },
  "security": [
    {
      "userApiKey (request header)": []
    },
    {
      "userApiKey (query parameter)": []
    }
  ],
  "parameters": {
    "accountIdInPath": {
      "name": "id",
      "in": "path",
      "required": true,
      "type": "number",
      "description": "Account ID (generated by Feedback)"
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "minimum": 0,
      "required": false,
      "type": "number",
      "description": "Limit the number of records returned"
    },
    "start": {
      "name": "start",
      "in": "query",
      "required": false,
      "type": "number",
      "minimum": 0,
      "description": "Offset to start at"
    },
    "order_by": {
      "name": "order_by",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The field to use for sort"
    },
    "order_dir": {
      "name": "order_dir",
      "in": "query",
      "required": false,
      "type": "string",
      "description": "The sort direction",
      "enum": [
        "asc",
        "desc"
      ]
    }
  },
  "responses": {
    "410": {
      "description": "Resource has been deleted",
      "headers": {
        "status": {
          "type": "integer",
          "enum": [
            "410"
          ]
        }
      }
    }
  },
  "paths": {
    "/accounts": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Query accounts",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/start"
          },
          {
            "$ref": "#/parameters/order_dir"
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "churned",
              "last_seen",
              "name"
            ],
            "description": "The field to use for sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get an Account",
        "parameters": [
          {
            "$ref": "#/parameters/accountIdInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "an Account",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      },
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Update an Account",
        "parameters": [
          {
            "$ref": "#/parameters/accountIdInPath"
          },
          {
            "name": "account",
            "in": "body",
            "description": "Updated Account values",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "monthly_value": {
                  "type": "number",
                  "format": "float"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "paying",
                    "prospect",
                    "not_paying"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Delete an Account",
        "description": "This removes most traces of an Accounts existence from the system.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "the deleted Account",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        }
      }
    },
    "/accounts/{id}/tags": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get custom Account tags",
        "parameters": [
          {
            "$ref": "#/parameters/accountIdInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of maps specifying tags under each tag group, for example:\n\n[\n\n{'impacts' => ['sales']},\n\n{'resources' => ['dev', 'test', 'support']}\n\n]"
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Overwrite current custom Account tags with the given tags",
        "parameters": [
          {
            "$ref": "#/parameters/accountIdInPath"
          },
          {
            "name": "tags",
            "required": true,
            "in": "body",
            "description": "An array of maps specifying tags under each tag group, for example:\n\n[\n\n{'impacts' => ['sales']},\n\n{'resources' => ['dev', 'test', 'support']}\n\n]",
            "schema": {
              "$ref": "#/definitions/Tags"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Account tags"
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Delete custom Account tags",
        "description": "Removes all custom tags associated with the Account",
        "parameters": [
          {
            "$ref": "#/parameters/accountIdInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": [
          "feature"
        ],
        "summary": "Search features",
        "parameters": [
          {
            "name": "scope",
            "description": "Specifies the type of entity being searched for. Must be set to 'feature'",
            "in": "query",
            "type": "string",
            "required": true,
            "enum": [
              "feature"
            ]
          },
          {
            "name": "q",
            "description": "The search term.",
            "in": "query",
            "type": "string",
            "required": true
          },
          {
            "name": "status",
            "description": "A comma seperated list of status values to filter by, if required. Valid values: 'new', 'waiting', 'planned', 'developing', 'released', 'declined'.",
            "in": "query",
            "type": "string",
            "required": false,
            "enum": [
              "new",
              "waiting",
              "planned",
              "developing",
              "released",
              "declined"
            ]
          },
          {
            "name": "tags",
            "description": "Tags to limit results by - only applies when scope is 'case' or 'feature'. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \"....&tags=TagExample,Multi:TagThis,Multi:TagThat\".",
            "in": "query",
            "type": "string",
            "required": false
          },
          {
            "name": "products",
            "description": "Products to limit results by. Comma delimeted string of either ids or names. E.g. \"...&products=1,2,3\" or \"...products=Product1,Product2\".",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Feature"
              }
            }
          }
        }
      }
    },
    "/comments": {
      "get": {
        "tags": [
          "comment"
        ],
        "summary": "fetch Comment records",
        "description": "get a list of Comment records",
        "parameters": [
          {
            "name": "case_id",
            "in": "query",
            "type": "integer",
            "description": "case_id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Comment records",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          }
        }
      }
    },
    "/features": {
      "get": {
        "tags": [
          "feature"
        ],
        "summary": "Query features",
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/start"
          },
          {
            "$ref": "#/parameters/order_dir"
          },
          {
            "name": "is_private",
            "description": "Filter by whether the features are shown/hidden from customer, if supplied.",
            "in": "query",
            "type": "boolean",
            "required": false
          },
          {
            "name": "wanted_by",
            "description": "Filter by User ID, if supplied.",
            "in": "query",
            "type": "integer",
            "required": false
          },
          {
            "name": "order_by",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "title",
              "created_at",
              "updated_at",
              "declined_at",
              "developing_at",
              "planned_at",
              "released_at",
              "waiting_at",
              "deleted_at"
            ],
            "description": "The field to use for sort"
          },
          {
            "name": "tags",
            "description": "Tags to limit results by. Multiple tags can be provided via comma delimeted string. Tags with contexts can be used. E.g. \"....&tags=TagExample,Multi:TagThis,Multi:TagThat\".",
            "in": "query",
            "type": "string",
            "required": false
          },
          {
            "name": "products",
            "description": "Products to limit results by. Comma delimeted string of either ids or names. E.g. \"...&products=1,2,3\" or \"...products=Product1,Product2\".",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Feature"
              }
            }
          }
        }
      }
    },
    "/features/{id}": {
      "get": {
        "tags": [
          "feature"
        ],
        "summary": "Get a Feature by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "ID of the feature"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/Feature"
            }
          }
        }
      }
    },
    "/features/{id}/tags": {
      "get": {
        "tags": [
          "feature"
        ],
        "summary": "Get custom Feature tags",
        "parameters": [
          {
            "$ref": "#/parameters/accountIdInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of maps specifying tags under each tag group, for example:\n\n[\n\n{'impacts' => ['sales']},\n\n{'resources' => ['dev', 'test', 'support']}\n\n]"
          },
          "404": {
            "description": "Feature not found"
          }
        }
      },
      "post": {
        "tags": [
          "feature"
        ],
        "summary": "Overwrite current custom Feature tags with the given tags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Feedback's Feature ID"
          },
          {
            "name": "tags",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Tags"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Feature tags"
          },
          "404": {
            "description": "Feature not found"
          }
        }
      },
      "delete": {
        "tags": [
          "feature"
        ],
        "summary": "Delete custom Feature tags",
        "description": "Removes all custom tags associated with the Feature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Feedback's Feature ID"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/health-check/ping": {
      "get": {
        "security": [],
        "tags": [
          "system"
        ],
        "summary": "Health check for API",
        "description": "Provides a response for automatic checks that the API and load balancers are healthy",
        "responses": {
          "200": {
            "description": "API is healthy"
          },
          "503": {
            "description": "Load balancers cannot route a request to a healthy API server"
          }
        }
      }
    },
    "/users/search": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find a User with a query",
        "parameters": [
          {
            "description": "Find using your external ID, rather than the ID generated by Feedback",
            "name": "external_id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Find user by their email address. Role param must be specified when using this option",
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Users role ('vendorUser' or 'endUser'). Only useful when finding a user by their email address",
            "name": "role",
            "in": "query",
            "type": "string",
            "enum": [
              "endUser",
              "vendorUser"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "the User record",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "410": {
            "description": "User has been deleted"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a User record",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "the User record",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "410": {
            "description": "User has been deleted"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update a User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Feedback's User ID"
          },
          {
            "name": "user",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "external_id": {
                  "type": "string"
                },
                "permission_group_id": {
                  "type": "number",
                  "format": "integer",
                  "description": "only valid for users with role 'vendorUser'"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a User",
        "description": "This removes most traces of a User's existence from the system. For an EndUser you might want to consider just letting them churn after a period of inactivity.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "the deleted User",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/{id}/tags": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get custom User tags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Feedback's User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of maps specifying tags under each tag group, for example:\n\n[\n\n{'impacts' => ['sales']},\n\n{'resources' => ['dev', 'test', 'support']}\n\n]"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Overwrite current custom User tags with the given tags",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Feedback's User ID"
          },
          {
            "name": "tags",
            "required": true,
            "in": "body",
            "description": "An array of maps specifying tags under each tag group, for example:\n\n[\n\n{'impacts' => ['sales']},\n\n{'resources' => ['dev', 'test', 'support']}\n\n]",
            "schema": {
              "$ref": "#/definitions/Tags"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated User tags"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete custom User tags",
        "description": "Removes all custom tags associated with the User",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Feedback's User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "fetch User records",
        "description": "get a list of User records",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "type": "string",
            "description": "role",
            "required": true,
            "enum": [
              "endUser",
              "vendorUser"
            ]
          },
          {
            "name": "account",
            "in": "query",
            "type": "integer",
            "description": "Filter by Account ID, if supplied. Only useful if role param is endUser",
            "required": false
          },
          {
            "name": "start",
            "description": "Offset to start at",
            "in": "query",
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "Limit the number of records returned. Max value can be 300. If limit is set to more than 300 the api will return an error",
            "default": 300,
            "required": false
          },
          {
            "$ref": "#/parameters/order_by"
          },
          {
            "$ref": "#/parameters/order_dir"
          }
        ],
        "responses": {
          "200": {
            "description": "User records",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Ping to create or update an EndUser and Account in one call",
        "description": "Replicates much of the functionality of the widget ping, allowing callers to create or update User records for End Users. If you call this with a new User and/or Account, the record will be created. If you call for an existing User/Account, the record will be updated. You can also call this at EndUser login time, or more frequently, to notify Feedback that the EndUser has been seen. This keeps Feedback's 'last seen' data fresh and updates your reporting. This endpoint is used by our Zapier integration. The only value allowed in user.roles is 'endUser'. The id you supply here for the User and Account should be your own unique id, which Feedback calls external_id. This probably isn't the same as Feedback's id seen elsewhere in the API.",
        "parameters": [
          {
            "name": "data",
            "description": "the account and user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndUserPing"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/users/invite_vendor_user": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user",
          "team"
        ],
        "summary": "Invite a VendorUser (Team member)",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "full_name"
              ],
              "properties": {
                "team": {
                  "type": "string"
                },
                "permission_group_id": {
                  "type": "number",
                  "format": "integer"
                },
                "email": {
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "external_id": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/users/invite_end_user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Invite an EndUser (customer)",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "account_status"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "send_invite": {
                  "type": "boolean"
                },
                "full_name": {
                  "type": "string"
                },
                "user_external_id": {
                  "type": "string"
                },
                "account_external_id": {
                  "type": "string"
                },
                "account_name": {
                  "type": "string"
                },
                "monthly_value": {
                  "type": "number",
                  "format": "float"
                },
                "account_status": {
                  "type": "string",
                  "enum": [
                    "prospect",
                    "not_paying",
                    "paying"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/vendor_users": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user",
          "team"
        ],
        "summary": "Create or update a team member by their external_id",
        "description": "the POST /vendor_users is very similar to the POST /users/invite_vendor_user but /vendor_users is intended for consumers to refresh team member data periodically, rather than just a one-off user creation.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "team": {
                  "type": "string",
                  "description": "A comma seperated list of teams the user belongs to"
                },
                "permission_group_id": {
                  "type": "number",
                  "format": "integer"
                },
                "email": {
                  "type": "string"
                },
                "full_name": {
                  "type": "string"
                },
                "external_id": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/votes": {
      "get": {
        "tags": [
          "votes"
        ],
        "parameters": [
          {
            "name": "user_id",
            "description": "Include only votes by User that voted on a feature.",
            "in": "query",
            "type": "integer",
            "required": false
          },
          {
            "name": "feature_id",
            "description": "Include only votes for Feature with this Feature ID",
            "in": "query",
            "type": "integer",
            "required": false
          },
          {
            "name": "positive",
            "description": "Include only votes that are positive",
            "in": "query",
            "type": "boolean",
            "required": false
          },
          {
            "name": "negative",
            "description": "Include only votes that are negative",
            "in": "query",
            "type": "boolean",
            "required": false
          },
          {
            "name": "start",
            "description": "Offset to start at",
            "in": "query",
            "type": "number",
            "minimum": 0,
            "required": false
          },
          {
            "name": "limit",
            "description": "Limit the number of records returned",
            "in": "query",
            "type": "number",
            "minimum": 0,
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Vote records",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Vote"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "votes"
        ],
        "summary": "update specified votes for a User",
        "description": "Automatically subscribes/unsubscribes the User to the specifed feature depending on the quantity value",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user_id": {
                  "type": "string"
                },
                "votes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/FeatureVote"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated votes"
          }
        }
      }
    },
    "/hooks": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Subscribe to webhooks",
        "description": "Use this endpoint to subscribe to webhooks.",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "target_url": {
                  "type": "string",
                  "description": "The target URL where the events will be sent to."
                },
                "event": {
                  "type": "string",
                  "description": "The event field can contain one of the following values-\n1) 'feature_created' - When a new feature is created a webhook will be triggered with the details of the feature. Feature details can be found in the model section under Feature object\n2) 'feature_status_changed' - When a feature status is updated a webhook will be triggered with the updated Feature details. Feature details can be found in the model section under Feature object.\n3) 'feature_comment_created' - When a commment is created on a feature, a webhook will be triggered with the details about the Feature and the new comment. Feature and Comment details can be found in the model section under Feature object and Comment object."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully subscribed to the weebhooks"
          }
        }
      }
    },
    "/hooks/unsubscribe": {
      "post": {
        "tags": [
          "hooks"
        ],
        "summary": "Unsubscribe from webhooks",
        "description": "Use this endpoint to unsubscribe from a webhook",
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "target_url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unsubscribed from the weebhooks"
          }
        }
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "is_paying": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "dateTime"
        },
        "monthly_value": {
          "type": "number",
          "format": "float"
        },
        "status": {
          "type": "string"
        },
        "external_id": {
          "type": "string",
          "description": "ID for the Account, provided by the Feedback Customer"
        }
      }
    },
    "FeatureVote": {
      "type": "object",
      "properties": {
        "feature_id": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "description": "Value between -1 and 1000000. -1 indicates that the User is \"Not Interested\" in the feature."
        }
      }
    },
    "AccountWithTags": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "is_paying": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "dateTime"
        },
        "monthly_value": {
          "type": "number",
          "format": "float"
        },
        "status": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/Tags"
        }
      }
    },
    "Feature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "resolution": {
          "type": "string",
          "description": "The latest Resolution set by the VendorUser"
        },
        "status": {
          "type": "string",
          "enum": [
            "new",
            "waiting",
            "planned",
            "developing",
            "released",
            "declined"
          ]
        },
        "vendor_id": {
          "type": "integer"
        },
        "created_at": {
          "type": "string"
        },
        "created_by_user_id": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        },
        "declined_at": {
          "type": "string"
        },
        "developing_at": {
          "type": "string"
        },
        "planned_at": {
          "type": "string"
        },
        "released_at": {
          "type": "string"
        },
        "waiting_at": {
          "type": "string"
        },
        "updated_by_user_id": {
          "type": "integer"
        },
        "resolved_by_user_id": {
          "type": "integer"
        },
        "app_url": {
          "type": "string",
          "description": "URL for this Feature"
        },
        "status_changed_at": {
          "type": "string"
        },
        "merged_to_feature_id": {
          "type": "integer",
          "description": "If this Feature was merged into another, the ID of the preserved Feature"
        },
        "form_entry": {
          "type": "string",
          "description": "a JSON serialized version of the Form containing the description and other fields for this Feature."
        },
        "effort": {
          "type": "integer",
          "description": "How much Effort is assigned to the development of this Feature. Not visible to EndUsers"
        },
        "is_private": {
          "type": "boolean",
          "description": "Is this Feature hidden from EndUsers?"
        },
        "view_count": {
          "type": "integer",
          "description": "How many times has this Feature been viewed. May only be visible to VendorUsers, depending on config"
        },
        "tags": {
          "$ref": "#/definitions/Tags"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Products associated with this Feature"
          }
        },
        "uploads": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Tags": {
      "description": "Tags can contain simple tags or categorised tags. Simple tags are supplied as an array of Strings\nSimple Tag Example:\n['Foo', 'Bar']. \nTo put the tags in categories replace the Strings with maps of using tag category as the key and tag value as the value where value can be array of strings, e.g\nCategorised Tag Example:\n[\n{'Color':['Red', 'Yellow']}, \n{'Flavor':['Cherry']}\n] \nSimple and categorised tags can be mixed in the same array.\nBelow validations are done on the tag values of both simple and categorised tags:\n1. Tag values must be strings\n2. Tags must be at least 2 characters in length\n3. Invalid characters (we dont accept following characters in tag value)  , | { } : < > "
    },
    "Products": {
      "description": "Supplied as an array of maps where each map describes an existing or new product e.g [{id:exising_product_id, name:existing name}, {id:new_product_id, name: new product name}]. \nExisting product id/names held in your account can be referenced at https://feedback.pendo.io/app/#/vendor/products",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "string",
          "enum": [
            "endUser"
          ]
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "dateTime"
        },
        "name": {
          "type": "string"
        },
        "external_id": {
          "type": "string"
        },
        "account": {
          "$ref": "#/definitions/UserAccount"
        }
      }
    },
    "UserAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "monthly_value": {
          "type": "number",
          "format": "float"
        },
        "status": {
          "type": "string",
          "enum": [
            "paying",
            "prospect",
            "not_paying"
          ]
        }
      }
    },
    "EndUserPing": {
      "type": "object",
      "properties": {
        "return_url": {
          "type": "string"
        },
        "user": {
          "type": "object",
          "properties": {
            "roles": {
              "type": "string",
              "enum": [
                "endUser"
              ]
            },
            "email": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "dateTime"
            },
            "full_name": {
              "type": "string"
            },
            "tags": {
              "$ref": "#/definitions/Tags"
            },
            "allowed_products": {
              "$ref": "#/definitions/Products"
            }
          }
        },
        "account": {
          "$ref": "#/definitions/AccountWithTags"
        }
      }
    },
    "Vote": {
      "type": "object",
      "properties": {
        "feature_id": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        },
        "quantity": {
          "type": "integer",
          "description": "A negative number indicates that the User has indicated \"Not Interested\" in a Features. Between 0 and 1000000 is the User's current prioritization of the Feature."
        },
        "created_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "feature_id": {
          "type": "integer"
        },
        "user_id": {
          "type": "integer"
        },
        "text": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "dateTime"
        },
        "updated_at": {
          "type": "string",
          "format": "dateTime"
        },
        "is_private": {
          "type": "boolean",
          "description": "Is this Comment hidden from EndUsers?"
        }
      }
    }
  }
}
